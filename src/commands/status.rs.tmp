use std::path::PathBuf;
use crate::prelude::*;

pub struct Status {
    ws: Workspace,
}
impl Status {
    pub fn build(workdir: PathBuf) -> crate::Result<Self> {
        let ws = Workspace::build(workdir)?;

        Ok(Self {
            ws,
        })
    }
    
    /*
    pub fn execute(&self) -> crate::Result<RevDiff> {
        let prev_rev = Repository::build(&self.ws)?
            .into_rev()?;
        let curr_rev = self.ws.into_rev()?;

        let rev_diff = prev_rev.diff(&curr_rev)?;
        Ok(rev_diff)
    }
    */
    fn read_head(&self) -> Result<Oid> {
        match self.
    }

    pub fn repository_status(&self) -> RepositoryStatus {
        let repo = self.ws.workdir().join(Repository::name());
        if !repo.exists() {
            return RepositoryStatus::RepositoryNotFound;
        }

        let db = repo.join(Database::name());
        if !db.exists() {
            return RepositoryStatus::DatabaseNotFound;
        }

        let local_head = repo.join(LocalHead::name());
        if !local_head.exists() {
            return RepositoryStatus::LocalHeadNotFound;
        }

        let refs = repo.join(Refs::name()).join(Refs::local());
        if !refs.exists() {
            return RepositoryStatus::RefsNotFound;
        }

        //check localhead
        let repo = Repository::build(&self.ws).unwrap();
        if !repo.local_head.get()
            .expect("something wrong with local_head")
            .is_branch() {
            return RepositoryStatus::OnRevision;
        }
            

        RepositoryStatus::Normal
    }
}

#[derive(Debug)]
pub enum RepositoryStatus {
    RepositoryNotFound,
    DatabaseNotFound,
    LocalHeadNotFound,
    RefsNotFound,
    OnRevision,
    Normal
}
impl RepositoryStatus {
    pub fn is_repository_initialized(&self) -> bool {
        use RepositoryStatus::*;
        match self {
            RepositoryNotFound => false,
            _ => true,
        }
    }
}
